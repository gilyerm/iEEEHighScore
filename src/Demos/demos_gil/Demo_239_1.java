package Demos.demos_gil;

import Experiments.Local.DecaByte;
import Experiments.Local.v3.EditProgramV3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Demo_239_1 {
    public static String[] arr;
    static{
        arr=new String[]{
                "0000000100",
                "0100000100",
                "0110000100",
                "0110000101",
                "0110000111",
                "0110001011",
                "0010001111",
                "0000011111",
                "0000111110",
                "0000111101",
                "0000110111",
                "0000111011",
                "0000101111",
                "0001001111",
                "0001011110",
                "0001011101",
                "0001010111",
                "0001011011",
                "0010011011",
                "0010101011",
                "0010101110",
                "0010101101",
                "0010100111",
                "0001100111",
                "0011000111",
                "0011001011",
                "0011001110",
                "0011001101",
                "0010011101",
                "0100011101",
                "0100010111",
                "0100011011",
                "0100011110",
                "0100001111",
                "1000001111",
                "1000011101",
                "1000010111",
                "1000011011",
                "1000011110",
                "0010011110",
                "0110001110",
                "0110001101",
                "0110010101",
                "0110010011",
                "0100110011",
                "0001110011",
                "0001110110",
                "0001101110",
                "0001101101",
                "0101001101",
                "0100101101",
                "0100101011",
                "0100100111",
                "0100101110",
                "1000101110",
                "1001001110",
                "1001001101",
                "1001001011",
                "1001000111",
                "0101000111",
                "1100000111",
                "1100001110",
                "1100001101",
                "1100001011",
                "1000101011",
                "0001101011",
                "0011100011",
                "0011100110",
                "0011100101",
                "0011010101",
                "0010110101",
                "0001110101",
                "0001111001",
                "0001111010",
                "0011101010",
                "0011011010",
                "0010111010",
                "0010110011",
                "0010111001",
                "0100111001",
                "0101101001",
                "0101001011",
                "0101001110",
                "0101010110",
                "0011010110",
                "0010010111",
                "1010010101",
                "1010010011",
                "1010000111",
                "1000100111",
                "1000110110",
                "0010110110",
                "0010111100",
                "0011111000",
                "0011011001",
                "0011101001",
                "1001101001",
                "1001100011",
                "1000110011",
                "1000111010",
                "1001011010",
                "0101011010",
                "0101011001",
                "0111001001",
                "0111000011",
                "0110100011",
                "1010100011",
                "1010100110",
                "1001100110",
                "1001100101",
                "1001010101",
                "0101010101",
                "0101010011",
                "1100010011",
                "1100010110",
                "1101000110",
                "1001010110",
                "1001011100",
                "0001111100",
                "0101111000",
                "0100111010",
                "0101101010",
                "0101100011",
                "1101000011",
                "1001010011",
                "1001011001",
                "1000111001",
                "1000111100",
                "0100111100",
                "0101101100",
                "0101100101",
                "0111000101",
                "0111010001",
                "0011110001",
                "0110110001",
                "0110110010",
                "0100110110",
                "0101100110",
                "0111000110",
                "1011000110",
                "1011000101",
                "1011001001",
                "1010011001",
                "1100011001",
                "0110011001",
                "0110011010",
                "0111010010",
                "0111001010",
                "1011001010",
                "1001101010",
                "1001101100",
                "1000101101",
                "1000110101",
                "0100110101",
                "1100010101",
                "1100110001",
                "1100110010",
                "1100101010",
                "1010101010",
                "0110101010",
                "1110001010",
                "1110001001",
                "1110000101",
                "1100100101",
                "1010100101",
                "0110100101",
                "0110100110",
                "0111100010",
                "1111000010",
                "1101010010",
                "1001110010",
                "1001110100",
                "1010110100",
                "0011110100",
                "0011101100",
                "0011011100",
                "0111011000",
                "0101011100",
                "0110011100",
                "0110110100",
                "0110101100",
                "1010101100",
                "1110101000",
                "1101101000",
                "1101011000",
                "1111010000",
                "0111110000",
                "0011110010",
                "1010110010",
                "1110100010",
                "1100100011",
                "1110000011",
                "1110100001",
                "0111100001",
                "1011100001",
                "1011110000",
                "1101110000",
                "1101010100",
                "1110010100",
                "0111010100",
                "0111001100",
                "1011001100",
                "1011101000",
                "1001111000",
                "1100111000",
                "1110110000",
                "0110111000",
                "1110011000",
                "1110001100",
                "1010011100",
                "1100011100",
                "1100110100",
                "0101110100",
                "0101110010",
                "1101100010",
                "1011100010",
                "1011000011",
                "1010001011",
                "1010101001",
                "0110101001",
                "1100101001",
                "1100101100",
                "1100100110",
                "1110000110",
                "1010010110",
                "0110010110",
                "1110010010",
                "1110010001",
                "1101010001",
                "1111000001",
                "1011010001",
                "0011010011",
                "1011010010",
                "1010011010",
                "1100011010",
                "1101001010",
                "1111001000",
                "0111101000",
                "0111100100",
                "1011100100",
                "1110100100",
                "1101100100",
                "1101000101",
                "1101100001",
                "0101110001",
                "1001110001",
                "1010110001",
                "1010111000",
                "1011011000",
                "1111001000",
                "0111001100",
                "1101001100",
                "1111000100",
                "1110001100",
                "1010001101",
                "1110001001",
                "0111001001",
                "1101001001",
                "1101010001",
                "1111010000",
                "1011010100",
                "1010011100",
                "0010011110",
                "1010001110",
                "1100001110",
                "1101001010",
                "1101100010",
                "1111100000",

        };
    }

    public static void main(String[] args) {

        List<String> collect1 = f(arr);


        EditProgramV3.Helper helper = EditProgramV3.solMain(collect1);

        System.out.println("count of indexes:\t"+helper.indexs.stream().distinct().count());
        System.out.println("res:\t"+helper.res);


    }
    
    
    public static List<String> f(String[] array){


        List<DecaByte> collect = Arrays.stream(array).parallel()
                .map(s -> s.replaceAll("2", "1").replaceAll("3", "1")
                        .replaceAll("4", "1").replaceAll("5", "1"))
                .map(DecaByte::new).collect(Collectors.toList());

        List<DecaByte> bits = new ArrayList<>();
        for (int i = 0; i < collect.size()-1; i++) {
            DecaByte cur = collect.get(i);
            DecaByte next = collect.get(i + 1);
            DecaByte bit = DecaByte.AND(DecaByte.XOR(cur, next), next);
            bits.add(bit);
        }

        System.out.println("collect size:\t"+collect.stream().map(DecaByte::toStringAsBin).count());
        System.out.println("collect size distinct:\t"+collect.stream().map(DecaByte::toStringAsBin).distinct().count());
        System.out.println("bits size:\t"+bits.size());

        List<String> collect1 = bits.stream().map(DecaByte::toStringAsBin).collect(Collectors.toList());

        System.out.println("how many waste:\t"+bits.stream().filter(decaByte -> decaByte.bitCount() != 1).map(DecaByte::toStringAsBin).collect(Collectors.toList()));
        System.out.println("missing:\t"+IntStream.range(0, 1024).filter(value -> Integer.bitCount(value) == 5).boxed().map(integer -> DecaByte.toBin(integer,10)).map(DecaByte::new).filter(s -> !collect.contains(s)).map(DecaByte::toStringAsBin).map(s -> s+"\n").collect(Collectors.toList()));


        System.out.println(collect1.stream().collect(Collectors.joining("\n")));

        return collect1;
    }


}
