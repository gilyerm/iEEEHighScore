package Demos;

import Experiments.Local.DecaByte;
import Experiments.Local.v3.EditProgramV3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Demo_239 {
    public static String[] arr;
    static {
        arr=new String[]{

//                "0010000000",
//                "0021000000",
//                "0032010000",
//                "0043020001",


                "0054030012",
                "0043020501",
                "0032010450",
                "0021000345",
                "0010005234",
                "0000054123",
                "0000543012",
                "0000432501",
                "0000321450",
                "0000210345",
                "0005100234",
                "0004005123",
                "0003054012",
                "0002043501",
                "0001032450",
                "0050021340",
                "0040010235",
                "0030500124",
                "0020405013",
                "0010304502",
                "0000203451",
                "0005102340",
                "0054001230",
                "0043500120",
                "0032400015",
                "0021300504",
                "0010250403",
                "0005140302",
                "0004030251",
                "0003520140",
                "0002410035",
                "0001305024",
                "0500204013",
                "0400103502",
                "0300002451",
                "0200051340",
                "0100040235",
                "5000030124",
                "4000025013",
                "3000014502",
                "2000003451",
                "1000502340",
                "0050401230",
                "0040350120",
                "0030240015",
                "0020135004",
                "0010024053",
                "0500013042",
                "0405002031",
                "0304001520",
                "0203000415",
                "0102005304",
                "0001504203",
                "5000403102",
                "4000302051",
                "3000251040",
                "2000140035",
                "1005030024",
                "0504020013",
                "0403010502",
                "0302500401",
                "0201400350",
                "0100300245",
                "5000200134",
                "4005100023",
                "3004000512",
                "2003005401",
                "1002054300",
                "0001543200",
                "0050432100",
                "0040321050",
                "0035210040",
                "0024105030",
                "0013004025",
                "5002003014",
                "4001052003",
                "3000541002",
                "2000430501",
                "1000325400",
                "0500214300",
                "0400103250",
                "0350002140",
                "0240001035",
                "0130000524",
                "5020000413",
                "4010005302",
                "3500004201",
                "2400003150",
                "1300052040",
                "0200541030",
                "0100430520",
                "5000320410",
                "4005210300",
                "3004100205",
                "2003050104",
                "1002540003",
                "0001435002",
                "0500324001",
                "0405213000",
                "0304102005",
                "0203051004",
                "0152040003",
                "0041035002",
                "0030024501",
                "0025013400",
                "0014502300",
                "0503401200",
                "0402350100",
                "0301240005",
                "0200130054",
                "0150020043",
                "5040010032",
                "4030005021",
                "3020004510",
                "2010053400",
                "1500042300",
                "0400031205",
                "0300520104",
                "0250410003",
                "0140300052",
                "5030200041",
                "4020100530",
                "3010050420",
                "2005040310",
                "1054030200",
                "0043520100",
                "0032415000",
                "0021304005",
                "0510203004",
                "5400102003",
                "4300001052",
                "3200000541",
                "2105000430",
                "1054000320",
                "0543000210",
                "0432000105",
                "0321000054",
                "5210000043",
                "4105000032",
                "3054000021",
                "2043005010",
                "1032004005",
                "0521003004",
                "0410052003",
                "5300041002",
                "4200030051",
                "3100520040",
                "2005410030",
                "1004305020",
                "0003254010",
                "5002143000",
                "4001032050",
                "3000021540",
                "2500010430",
                "1400500320",
                "0350400210",
                "0240300105",
                "0135200004",
                "0024150003",
                "5013040002",
                "4502030001",
                "3401020050",
                "2350010040",
                "1240005030",
                "0130054020",
                "0025043010",
                "0514032000",
                "0403021050",
                "0302510040",
                "0201405030",
                "0150304020",
                "5040203010",
                "4030102005",
                "3020051004",
                "2010040503",
                "1500030402",
                "0450020301",
                "0340010250",
                "5230000140",
                "4120500030",
                "3015400020",
                "2004300510",
                "1053200400",
                "0542100300",
                "0431005200",
                "0320004105",
                "5210003004",
                "4105002003",
                "3004501002",
                "2053400001",
                "1042305000",
                "0531204000",
                "0420103500",
                "5310002400",
                "4200501300",
                "3100450200",
                "2050340100",
                "1040230050",
                "0530120040",
                "0425010030",
                "0314005020",
                "5203004010",
                "4102003500",
                "3001502400",
                "2050401300",
                "1540300200",
                "0430250100",
                "5320140000",
                "4210035000",
                "3105024000",
                "2054013000",
                "1043002500",
                "0032001405",
                "5021000304",
                "4510000203",
                "3400500102",
                "2300450001",
                "1205340000",
                "0154230000",
                "5043120000",
                "4532010000",
                "3421500000",
                "2310405000",
                "1200354000",
                "0150243000",
                "5040132000",
                "4030021050",
                "3025010040",
                "2514000030",
                "1403500020",
                "0302400015",
                "5201300004",
                "4150200003",
                "3040150002",
                "2530040001",
                "1420030500",
                "0315020400",
                "5204010300",
                "4103000205",
        };
    }

    public static void main(String[] args) {

        List<String> collect1 = f(arr);


        EditProgramV3.Helper helper = EditProgramV3.solMain(collect1);

        System.out.println("count of Chistory:\t"+helper.Chistory.stream().distinct().count());
        System.out.println("count of indexes:\t"+helper.indexs.stream().distinct().count());
        System.out.println("res:\t"+helper.res);


    }
    
    
    public static List<String> f(String[] array){


        List<DecaByte> collect = Arrays.stream(array).parallel()
                .map(s -> s.replaceAll("2", "1").replaceAll("3", "1")
                        .replaceAll("4", "1").replaceAll("5", "1"))
                .map(DecaByte::new).collect(Collectors.toList());

        List<DecaByte> bits = new ArrayList<>();
        for (int i = 0; i < collect.size()-1; i++) {
            DecaByte cur = collect.get(i);
            DecaByte next = collect.get(i + 1);
            DecaByte bit = DecaByte.AND(DecaByte.XOR(cur, next), next);
            bits.add(bit);
        }

        System.out.println("collect size:\t"+collect.stream().map(DecaByte::toStringAsBin).count());
        System.out.println("collect size distinct:\t"+collect.stream().map(DecaByte::toStringAsBin).distinct().count());
        System.out.println("bits size:\t"+bits.size());

        List<String> collect1 = bits.stream().map(DecaByte::toStringAsBin).collect(Collectors.toList());

        System.out.println("how many waste:\t"+bits.stream().filter(decaByte -> decaByte.bitCount() != 1).map(DecaByte::toStringAsBin).collect(Collectors.toList()));
//        System.out.println("missing:\t"+IntStream.range(0, 1024).filter(value -> Integer.bitCount(value) == 5).boxed().map(integer -> DecaByte.toBin(integer,10)).map(DecaByte::new).filter(s -> !collect.contains(s)).map(DecaByte::toStringAsBin).map(s -> s+"\n").collect(Collectors.toList()));


        System.out.println(collect1.stream().collect(Collectors.joining("\n")));

        return collect1;
    }


}
